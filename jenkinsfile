def artifactVersion() {
    def data = readFile('version')
    def major = data.findAll($/(?m)^STUDIO_MAJOR_VERSION=(\d+)/$).first().split('=').last()
    def minor = data.findAll($/(?m)^STUDIO_MINOR_VERSION=(\d+)/$).first().split('=').last()
    def patch = data.findAll($/(?m)^STUDIO_PATCH_LEVEL=(\d+)/$).first().split('=').last()
    return major + "." + minor + "." + patch
}

pipeline {
    agent none

    options {
        parallelsAlwaysFailFast()
        disableConcurrentBuilds()
    }

    stages {
        stage('Build') {
            parallel {
                stage ('linux') {
                    agent { label 'master' }
                    steps {
                        step([$class: 'WsCleanup'])
                        checkout scm
                        sh '''
                            qmake gams-studio.pro CONFIG+=release && make -j3
                        '''
                    }
                    post {
                        always {
                            recordIssues aggregatingResults: true, enabledForFailure: true, tools: [gcc4(reportEncoding: 'UTF-8')]
                            recordIssues enabledForFailure: true, tools: [taskScanner(ignoreCase: true, includePattern: '**/*.c, **/*.cpp, **/*.h, **/*.pro, **/*.pri', normalTags: 'TODO')]
                        }
                    }
                }
                stage ('windowsX86') {
                    agent { label 'windowsX86' }
                    steps {
                        step([$class: 'WsCleanup'])
                        checkout scm
                        bat '''
                            @echo off
                            echo Setting up environment for VS 2017 usage...
                            cd "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\VC\\Auxiliary\\Build"
                            call vcvars32.bat
                            cd %WORKSPACE%
                            qmake gams-studio.pro "CONFIG+=release"
                            nmake
                        '''
                    }
                    post {
                        always {
                            recordIssues aggregatingResults: true, enabledForFailure: true, tools: [msBuild(id: 'windowsX86', name: 'MSBuild-x86', reportEncoding: 'UTF-8')]
                        }
                    }
                }
                stage ('windowsX64') {
                    agent { label 'windowsX64' }
                    steps {
                        step([$class: 'WsCleanup'])
                        checkout scm
                        bat '''
                            @echo off
                            echo Setting up environment for VS2017 usage...
                            cd "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Auxiliary\\Build"
                            call vcvars64.bat
                            cd %WORKSPACE%
                            qmake gams-studio.pro "CONFIG+=release"
                            nmake
                        '''
                    }
                    post {
                        always {
                            recordIssues aggregatingResults: true, enabledForFailure: true, tools: [msBuild(id: 'windowsX64', name: 'MSBuild-x64', reportEncoding: 'UTF-8')]
                        }
                    }
                }
                stage ('macos') {
                    agent { label 'macos' }
                    steps {
                        step([$class: 'WsCleanup'])
                        checkout scm
                        sh 'qmake gams-studio.pro CONFIG+=release && make -j3'
                    }
                    post {
                        always {
                            recordIssues aggregatingResults: true, enabledForFailure: true, tools: [clang(reportEncoding: 'UTF-8')]
                        }
                    }
                }
            }
        }
        stage('Test') {
            parallel {
                stage ('linux') {
                    agent { label 'master' }
                    steps {
                        sh '''
                            mkdir reports
                            cd tests/bin
                            for f in *; do
                                xvfb-run -a ./$f -xunitxml -o $WORKSPACE/reports/$f.xml
                            done
                        '''
                    }
                    post {
                        always {
                            junit allowEmptyResults: true, testResults: 'reports/*.xml'
                        }
                    }
                }
                stage ('windowsX86') {
                    agent { label 'windowsX86' }
                    steps {
                        bat '''
                            mkdir reports
                            cd tests/bin
                            for %%f in (*) do %%f -xunitxml -o %WORKSPACE%/reports/%%f.xml
                        '''
                    }
                    post {
                        always {
                            junit allowEmptyResults: true, testResults: 'reports/*.xml'
                        }
                    }
                }
                stage ('windowsX64') {
                    agent { label 'windowsX64' }
                    steps {
                        bat '''
                            mkdir reports
                            cd tests/bin
                            for %%f in (*) do %%f -xunitxml -o %WORKSPACE%/reports/%%f.xml
                        '''
                    }
                    post {
                        always {
                            junit allowEmptyResults: true, testResults: 'reports/*.xml'
                        }
                    }
                }
                stage ('macos') {
                    agent { label 'macos' }
                    steps {
                        sh '''
                            mkdir reports
                            cd tests/bin
                            for f in *; do
                                ./$f -xunitxml -o $WORKSPACE/reports/$f.xml
                            done
                        '''
                    }
                    post {
                        always {
                            junit allowEmptyResults: true, testResults: 'reports/*.xml'
                        }
                    }
                }
            }
        }
        stage('Pack') {
            parallel {
                stage ('linux') {
                    agent { label 'master' }
                    steps {
                        sh '''
                            # create folder structure
                            mkdir -p appdir/usr/bin
                            mkdir -p appdir/usr/share/pixmaps

                            # collect files
                            cp src/bin/studio appdir/usr/bin/
                            cp platform/linux/gamsstudio.desktop appdir/usr/share/studio.desktop
                            cp icons/* appdir/usr/share/pixmaps
                            cp CHANGELOG appdir/usr/resources/Changelog

                            # TODO (AF) take a look at linuxdeployqt
                            # workaround for linuxdeployqt and svg
                            mkdir -p appdir/usr/plugins/imageformats
                            cp /opt/Qt/5.11.0/plugins/imageformats/libqsvg.so appdir/usr/plugins/imageformats/

                            linuxdeployqt-5-x86_64.AppImage appdir/usr/share/studio.desktop -appimage -bundle-non-qt-libs -no-translations -extra-plugins=iconengines -exclude-libs=libnss3,libnssutil3
                        '''
                        script {
                            def versionData = artifactVersion()
                            if (env.BRANCH_NAME != 'master') {
                                sh "mv GAMS_Studio-x86_64.AppImage ${env.BRANCH_NAME}-studio-${versionData}-x86_64.AppImage"
                                archiveArtifacts artifacts: '*studio*.AppImage', fingerprint: true
                            } else {
                                sh "mv GAMS_Studio-x86_64.AppImage GAMS_Studio-${versionData}-x86_64.AppImage"
                                archiveArtifacts artifacts: 'GAMS*.AppImage', fingerprint: true
                            }
                        }
                    }
                }
                stage ('windowsX86') {
                    agent { label 'windowsX86' }
                    steps {
                        bat '''
                            windeployqt --release --compiler-runtime --force src\\bin\\studio.exe

                            copy CHANGELOG "src\\bin\\Changelog"
                            copy "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\VC\\Redist\\MSVC\\14.15.26706\\x86\\Microsoft.VC141.CRT\\*" "src\\bin"
                            copy "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\VC\\Redist\\MSVC\\14.15.26706\\vc_redist.x86.exe" "src\\bin"
                        '''
                        fileOperations([folderCreateOperation('tmp/studio'), folderCopyOperation(destinationFolderPath: 'tmp/studio', sourceFolderPath: 'src/bin')])
                            withCredentials([certificate(aliasVariable: '', credentialsId: '302df092-b329-47b9-8f7a-605da075126d', keystoreVariable: 'WIN_CERT_FILE', passwordVariable: 'WIN_CERT_PASSWD')]) {
                            bat '''
                                echo Setting up environment for VS 2017 usage...
                                cd "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\VC\\Auxiliary\\Build"
                                call vcvars32.bat
                                cd %WORKSPACE%\\tmp\\studio
                                signtool sign /v /f %WIN_CERT_FILE% /p %WIN_CERT_PASSWD% /tr http://timestamp.comodoca.com studio.exe
                            '''
                        }
                        script {
                            def versionData = artifactVersion()
                            if (env.BRANCH_NAME != 'master') {
                                zip zipFile: "${env.BRANCH_NAME}-studio-${versionData}-x86_32.zip", archive: true, dir: 'tmp'
                            } else {
                                zip zipFile: "GAMS_Studio-${versionData}-x86_32.zip", archive: true, dir: 'tmp'
                            }
                        }
                    }
                }
                stage ('windowsX64') {
                    agent { label 'windowsX64' }
                    steps {
                        bat '''
                            windeployqt --release --compiler-runtime --force src\\bin\\studio.exe

                            copy CHANGELOG "src\\bin\\Changelog"
                            copy "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Redist\\MSVC\\14.12.25810\\x64\\Microsoft.VC141.CRT\\*" "src\\bin"
                            copy "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Redist\\MSVC\\14.12.25810\\vc_redist.x64.exe" "src\\bin"
                        '''
                        fileOperations([folderCreateOperation('tmp/studio'), folderCopyOperation(destinationFolderPath: 'tmp/studio', sourceFolderPath: 'src/bin')])
                        withCredentials([certificate(aliasVariable: '', credentialsId: '302df092-b329-47b9-8f7a-605da075126d', keystoreVariable: 'WIN_CERT_FILE', passwordVariable: 'WIN_CERT_PASSWD')]) {
                            bat '''
                                echo Setting up environment for VS2017 usage...
                                cd "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Auxiliary\\Build"
                                call vcvars64.bat
                                cd %WORKSPACE%\\tmp\\studio
                                signtool sign /v /f %WIN_CERT_FILE% /p %WIN_CERT_PASSWD% /tr http://timestamp.comodoca.com studio.exe
                            '''
                        }
                        script {
                            def versionData = artifactVersion()
                            if (env.BRANCH_NAME != 'master') {
                                zip zipFile: "${env.BRANCH_NAME}-studio-${versionData}-x86_64.zip", archive: true, dir: 'tmp'
                            } else {
                                zip zipFile: "GAMS_Studio-${versionData}-x86_64.zip", archive: true, dir: 'tmp'
                            }
                        }
                    }
                }
                stage ('macos') {
                    agent { label 'macos' }
                    steps {
                        fileOperations([folderRenameOperation(destination: 'src/bin/GAMS Studio.app', source: 'src/bin/studio.app')])
                        withCredentials([string(credentialsId: '2e590f95-5e30-4101-93be-31a1b7402da4', variable: 'MACOS_KEYCHAIN_PASSWD')]) {
                            sh '''
                                cd src/bin
                                security unlock-keychain -p ${MACOS_KEYCHAIN_PASSWD}

                                macdeployqt "GAMS Studio.app" -always-overwrite
                                cp CHANGELOG "GAMS Studio.app/Contents/Resources/Changelog"
                                codesign --sign ${CODESIGN_IDENTITY} --options runtime --force --deep --timestamp --entitlements ../../platform/macos/studio.entitlements.plist "GAMS Studio.app"
                                codesign --sign ${CODESIGN_IDENTITY} --options runtime --force --timestamp --entitlements ../../platform/macos/webengine.entitlements.plist "GAMS Studio.app/Contents/Frameworks/QtWebEngineCore.framework/Helpers/QtWebEngineProcess.app/Contents/MacOS/QtWebEngineProcess"
                                hdiutil create -volname "GAMS Studio" -srcfolder "GAMS Studio.app" -ov -fs HFS+ -format UDZO "GAMS Studio.dmg"

                                security lock-keychain
                            '''
                            sh '''
                                codesign --verify --verbose "src/bin/GAMS Studio.app"
                            '''
                        }
                        sh '''
                            mv "src/bin/GAMS Studio.dmg" studio.dmg
                        '''
                        script {
                            def versionData = artifactVersion()
                            if (env.BRANCH_NAME != 'master') {
                                sh "mv studio.dmg ${env.BRANCH_NAME}-studio-${versionData}-x86_64.dmg"
                            } else {
                                sh "mv studio.dmg GAMS_Studio-${versionData}-x86_64.dmg"
                            }
                        }
                        archiveArtifacts artifacts: '*.dmg', fingerprint: true
                    }
                }
            }
        }
    }
}
