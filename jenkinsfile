pipeline {
    agent any

    options {
        buildDiscarder(logRotator(numToKeepStr: '20', daysToKeepStr: '5'))
        disableConcurrentBuilds()
    }

    stages {
        stage('Build') {
            steps {
                parallel linux: {
                    node('master') {
                        step([$class: 'WsCleanup'])
                        checkout scm
                        sh '''
                            qmake src/studio.pro && make -j3
                        '''
                        warnings canComputeNew: false, canResolveRelativePaths: false, categoriesPattern: '', consoleParsers: [[parserName: 'GNU Make + GNU C Compiler (gcc)']], defaultEncoding: '', excludePattern: '', healthy: '', includePattern: '', messagesPattern: '', unHealthy: ''
                    }
                },
                windowsX86: {
                    node('windowsX86') {
                        step([$class: 'WsCleanup'])
                        checkout scm
                        bat '''
                            @echo off
                            echo Setting up environment for VS 2015 usage...
                            cd "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC"
                            call vcvarsall.bat x86
                            set
                            cd %WORKSPACE%\\src
                            qmake studio.pro "CONFIG+=release"
                            nmake
                        '''
                        warnings canComputeNew: false, canResolveRelativePaths: false, categoriesPattern: '', consoleParsers: [[parserName: 'MSBuild']], defaultEncoding: '', excludePattern: '', healthy: '', includePattern: '', messagesPattern: '', unHealthy: ''
                    }
                },
                windowsX64: {
                    node('windowsX64') {
                        step([$class: 'WsCleanup'])
                        checkout scm
                        bat '''
                            @echo off
                            echo Setting up environment for VS2017 usage...
                            cd "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Auxiliary\\Build"
                            call vcvars64.bat
                            set
                            cd %WORKSPACE%\\src
                            qmake studio.pro "CONFIG+=release"
                            nmake
                        '''
                        warnings canComputeNew: false, canResolveRelativePaths: false, categoriesPattern: '', consoleParsers: [[parserName: 'MSBuild']], defaultEncoding: '', excludePattern: '', healthy: '', includePattern: '', messagesPattern: '', unHealthy: ''
                    }
                },
                macos: {
                    node('macos') {
                        step([$class: 'WsCleanup'])
                        checkout scm
                        sh 'qmake src/studio.pro && make -j3'
                        warnings canComputeNew: false, canResolveRelativePaths: false, categoriesPattern: '', consoleParsers: [[parserName: 'Clang (LLVM based)']], defaultEncoding: '', excludePattern: '', healthy: '', includePattern: '', messagesPattern: '', unHealthy: ''
                    }
                }
            }
        }
        stage('Test') {
            steps {
                parallel linux: {
                    node('master') {
                        sh '''
                            echo 'TODO Test on linux'
                        '''
                    }
                },
                windowsX86: {
                    node('windowsX86') {
                        bat '''
                            echo 'TODO Test on windowsX86'
                        '''
                    }
                },
                windowsX64: {
                    node('windowsX64') {
                        bat '''
                            echo 'TODO Test on windowsX64'
                        '''
                    }
                },
                macos: {
                    node('macos') {
                        sh '''
                            echo 'TODO Test on macos'
                        '''
                    }
                }
            }
        }
        stage('Pack') {
            steps {
                parallel linux: {
                    node('master') {
                        sh '''
                            curl --remote-name --location https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage 
                        '''
                        sh '''
                            # create folder structure
                            mkdir -p appdir/usr/bin
                            mkdir -p appdir/usr/share/pixmaps

                            # collect files
                            cp bin/studio appdir/usr/bin/
                            cp gamsstudio.desktop appdir/usr/share/studio.desktop
                            cp icons/* appdir/usr/share/pixmaps

                            chmod +x linuxdeployqt-continuous-x86_64.AppImage
                            ./linuxdeployqt-continuous-x86_64.AppImage --version
                            ./linuxdeployqt-continuous-x86_64.AppImage appdir/usr/share/studio.desktop -appimage -bundle-non-qt-libs -no-translations -extra-plugins=iconengines
                        '''
                        fileOperations([folderCreateOperation('tmp/studio'), folderCopyOperation(destinationFolderPath: 'tmp/studio', sourceFolderPath: 'appdir')])
                        zip zipFile: 'studio-nix.zip', archive: false, dir: 'tmp'
                        script {
                            if (env.BRANCH_NAME != 'master') {
                                sh "mv GAMS_Studio-x86_64.AppImage ${env.BRANCH_NAME}-studio-x64.AppImage"
                                sh "mv studio-nix.zip ${env.BRANCH_NAME}-studio-nix.zip"
                            } else {
                                sh "mv GAMS_Studio-x86_64.AppImage studio-x64.AppImage"
                            }
                        }
                        archiveArtifacts artifacts: '**/*studio*.AppImage, *.zip', fingerprint: true
                    }
                },
                windowsX86: {
                    node('windowsX86') {
                        bat 'echo %PATH%'
                        bat 'windeployqt --release --compiler-runtime --force src\\bin\\studio.exe'
                        fileOperations([folderCreateOperation('tmp/studio'), folderCopyOperation(destinationFolderPath: 'tmp/studio', sourceFolderPath: 'src/bin')])
                        script {
                            if (env.BRANCH_NAME != 'master') {
                                zip zipFile: "${env.BRANCH_NAME}-studio-x86.zip", archive: true, dir: 'tmp'
                            } else {
                                zip zipFile: 'studio-x86.zip', archive: true, dir: 'tmp'
                            }
                        }
                    }
                },
                windowsX64: {
                    node('windowsX64') {
                        bat 'echo %PATH%'
                        bat 'windeployqt --release --compiler-runtime --force src\\bin\\studio.exe'
                        fileOperations([folderCreateOperation('tmp/studio'), folderCopyOperation(destinationFolderPath: 'tmp/studio', sourceFolderPath: 'src/bin')])
                        script {
                            if (env.BRANCH_NAME != 'master') {
                                zip zipFile: "${env.BRANCH_NAME}-studio-x64.zip", archive: true, dir: 'tmp'
                            } else {
                                zip zipFile: 'studio-x64.zip', archive: true, dir: 'tmp'
                            }
                        }
                    }
                },
                macos: {
                    node('macos') {
                        fileOperations([folderRenameOperation(destination: 'bin/GAMS Studio.app', source: 'bin/studio.app')])
                        sh '''
                            security unlock-keychain -p ${KEYCHAIN_PASSWD}
                            macdeployqt "bin/GAMS Studio.app" -dmg -always-overwrite -codesign=${CODESIGN_IDENTITY}
                            mv "bin/GAMS Studio.dmg" studio.dmg
                        '''
                        zip zipFile: 'studio-mac.zip', archive: false, dir: 'bin'
                        script {
                            if (env.BRANCH_NAME != 'master') {
                                sh "mv studio.dmg ${env.BRANCH_NAME}-studio.dmg"
                                sh "mv studio-mac.zip ${env.BRANCH_NAME}-studio-mac.zip"
                            }
                        }
                        archiveArtifacts artifacts: '*.dmg, *.zip', fingerprint: true
                    }
                }
            }
        }
        stage('Deploy') {
            steps {
                parallel linux: {
                    node('master') {
                        script {
                            if ((env.BRANCH_NAME == 'master')|(env.BRANCH_NAME == 'develop')) {
                               sh 'scp -B *studio*.AppImage ${ARTIFACT_TARGET}'
                            }
                        }
                    }
                },
                windowsX86: {
                    node('windowsX86') {
                        script {
                            if ((env.BRANCH_NAME=='master')|(env.BRANCH_NAME=='develop')) {
                                bat "pscp -i ${WIN_KEY_FILE} -hostkey ${WIN_KEY_FINGERPRINT} -agent -batch *studio-x86.zip ${ARTIFACT_TARGET}"
                            }
                        }
                    }
                },
                windowsX64: {
                    node('windowsX64') {
                        script {
                            if ((env.BRANCH_NAME=='master')|(env.BRANCH_NAME=='develop')) {
                                bat "pscp -i ${WIN_KEY_FILE} -hostkey ${WIN_KEY_FINGERPRINT} -agent -batch *studio-x64.zip ${ARTIFACT_TARGET}"
                            }
                        }
                    }
                },
                macos: {
                    node('macos') {
                        script {
                            if ((env.BRANCH_NAME == 'master')|(env.BRANCH_NAME == 'develop')) {
                                sh 'scp *.dmg ${ARTIFACT_TARGET}'
                            }
                        }
                    }
                }
            }
        }
    }
}
