pipeline {
    agent none

    options {
        buildDiscarder(logRotator(numToKeepStr: '10', daysToKeepStr: '2'))
        disableConcurrentBuilds()
    }

    stages {
        stage('Build') {
            parallel {
                stage ('linux') {
                    agent { label 'master' }
                    steps {
                        step([$class: 'WsCleanup'])
                        checkout scm
                        sh '''
                            qmake gams-studio.pro CONFIG+=release && make -j3
                        '''
                        warnings canComputeNew: false, canResolveRelativePaths: false, categoriesPattern: '', consoleParsers: [[parserName: 'GNU Make + GNU C Compiler (gcc)']], defaultEncoding: '', excludePattern: '', healthy: '', includePattern: '', messagesPattern: '', unHealthy: ''
                    }
                }
                stage ('windowsX86') {
                    agent { label 'windowsX86' }
                    steps {
                        step([$class: 'WsCleanup'])
                        checkout scm
                        bat '''
                            @echo off
                            echo Setting up environment for VS 2015 usage...
                            cd "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\bin"
                            call vcvars32.bat
                            cd %WORKSPACE%
                            qmake gams-studio.pro "CONFIG+=release"
                            nmake
                        '''
                        warnings canComputeNew: false, canResolveRelativePaths: false, categoriesPattern: '', consoleParsers: [[parserName: 'MSBuild']], defaultEncoding: '', excludePattern: '', healthy: '', includePattern: '', messagesPattern: '', unHealthy: ''
                    }
                }
                stage ('windowsX64') {
                    agent { label 'windowsX64' }
                    steps {
                        step([$class: 'WsCleanup'])
                        checkout scm
                        bat '''
                            @echo off
                            echo Setting up environment for VS2017 usage...
                            cd "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Auxiliary\\Build"
                            call vcvars64.bat
                            cd %WORKSPACE%
                            qmake gams-studio.pro "CONFIG+=release"
                            nmake
                        '''
                        warnings canComputeNew: false, canResolveRelativePaths: false, categoriesPattern: '', consoleParsers: [[parserName: 'MSBuild']], defaultEncoding: '', excludePattern: '', healthy: '', includePattern: '', messagesPattern: '', unHealthy: ''
                    }
                }
                stage ('macos') {
                    agent { label 'macos' }
                    steps {
                        step([$class: 'WsCleanup'])
                        checkout scm
                        sh 'qmake gams-studio.pro CONFIG+=release && make -j3'
                    }
                    post {
                        always {
                            recordIssues enabledForFailure: true, tools: [clang(reportEncoding: 'UTF-8')]
                        }
                    }
                }
            }
        }
        stage('Test') {
            parallel {
                stage ('linux') {
                    agent { label 'master' }
                    steps {
                        sh '''
                            mkdir reports
                            cd tests/bin
                            for f in *; do
                                xvfb-run -a ./$f -xunitxml -o $WORKSPACE/reports/$f.xml
                            done
                        '''
                    }
                    post {
                        always {
                            junit allowEmptyResults: true, testResults: 'reports/*.xml'
                        }
                    }
                }
                stage ('windowsX86') {
                    agent { label 'windowsX86' }
                    steps {
                        bat '''
                            mkdir reports
                            cd tests/bin
                            for %%f in (*) do %%f -xunitxml -o %WORKSPACE%/reports/%%f.xml
                        '''
                    }
                    post {
                        always {
                            junit allowEmptyResults: true, testResults: 'reports/*.xml'
                        }
                    }
                }
                stage ('windowsX64') {
                    agent { label 'windowsX64' }
                    steps {
                        bat '''
                            mkdir reports
                            cd tests/bin
                            for %%f in (*) do %%f -xunitxml -o %WORKSPACE%/reports/%%f.xml
                        '''
                    }
                    post {
                        always {
                            junit allowEmptyResults: true, testResults: 'reports/*.xml'
                        }
                    }
                }
                stage ('macos') {
                    agent { label 'macos' }
                    steps {
                        sh '''
                            mkdir reports
                            cd tests/bin
                            for f in *; do
                                ./$f -xunitxml -o $WORKSPACE/reports/$f.xml
                            done
                        '''
                    }
                    post {
                        always {
                            junit allowEmptyResults: true, testResults: 'reports/*.xml'
                        }
                    }
                }
            }
        }
    }
}
