/**
 * GAMS Engine
 * GAMS Engine let's you register, solve and get results of GAMS Models. It has namespace management system so you can restrict your users to certain set of models.
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIJobsApi_H
#define OAI_OAIJobsApi_H

#include "OAIHttpRequest.h"

#include "OAIHttpFileElement.h"
#include "OAIJob.h"
#include "OAILog_piece.h"
#include "OAIMessage.h"
#include "OAIMessage_and_token.h"
#include "OAIStatus_code_meaning.h"
#include "OAIStream_entry.h"
#include "OAIText_entry.h"
#include <QString>

#include <QObject>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIJobsApi : public QObject {
    Q_OBJECT

public:
    OAIJobsApi(const QString &scheme = "http", const QString &host = "localhost", int port = 0, const QString &basePath = "", const int timeOut = 0);
    ~OAIJobsApi();

    void setScheme(const QString &scheme);
    void setHost(const QString &host);
    void setPort(int port);
    void setBasePath(const QString &basePath);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();

    void createJob(const QString &model, const QString &r_namespace, const QString &stdout_filename, const QList<QString> &text_entries, const QList<QString> &stream_entries, const QList<QString> &arguments, const OAIHttpFileElement &model_data, const OAIHttpFileElement &data, const OAIHttpFileElement &inex_file);
    void getJob(const QString &token, const QString &x_fields);
    void getJobTextEntry(const QString &token, const QString &entry_name, const qint32 &start_position, const qint32 &length);
    void getJobTextEntryInfo(const QString &token, const QString &entry_name);
    void getJobZip(const QString &token);
    void getJobZipInfo(const QString &token);
    void getStatusCodes(const QString &x_fields);
    void killJob(const QString &token, const bool &hard_kill);
    void listJobs(const bool &everyone, const QString &x_fields);
    void popJobLogs(const QString &token);
    void popStreamEntry(const QString &token, const QString &entry_name);

private:
    QString _scheme, _host;
    int _port;
    QString _basePath;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> defaultHeaders;
    bool isResponseCompressionEnabled;
    bool isRequestCompressionEnabled;

    void createJobCallback(OAIHttpRequestWorker *worker);
    void getJobCallback(OAIHttpRequestWorker *worker);
    void getJobTextEntryCallback(OAIHttpRequestWorker *worker);
    void getJobTextEntryInfoCallback(OAIHttpRequestWorker *worker);
    void getJobZipCallback(OAIHttpRequestWorker *worker);
    void getJobZipInfoCallback(OAIHttpRequestWorker *worker);
    void getStatusCodesCallback(OAIHttpRequestWorker *worker);
    void killJobCallback(OAIHttpRequestWorker *worker);
    void listJobsCallback(OAIHttpRequestWorker *worker);
    void popJobLogsCallback(OAIHttpRequestWorker *worker);
    void popStreamEntryCallback(OAIHttpRequestWorker *worker);

signals:

    void createJobSignal(OAIMessage_and_token summary);
    void getJobSignal(OAIJob summary);
    void getJobTextEntrySignal(OAIText_entry summary);
    void getJobTextEntryInfoSignal();
    void getJobZipSignal(OAIHttpFileElement summary);
    void getJobZipInfoSignal();
    void getStatusCodesSignal(QList<OAIStatus_code_meaning> summary);
    void killJobSignal(OAIMessage summary);
    void listJobsSignal(QList<OAIJob> summary);
    void popJobLogsSignal(OAILog_piece summary);
    void popStreamEntrySignal(OAIStream_entry summary);

    void createJobSignalFull(OAIHttpRequestWorker *worker, OAIMessage_and_token summary);
    void getJobSignalFull(OAIHttpRequestWorker *worker, OAIJob summary);
    void getJobTextEntrySignalFull(OAIHttpRequestWorker *worker, OAIText_entry summary);
    void getJobTextEntryInfoSignalFull(OAIHttpRequestWorker *worker);
    void getJobZipSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getJobZipInfoSignalFull(OAIHttpRequestWorker *worker);
    void getStatusCodesSignalFull(OAIHttpRequestWorker *worker, QList<OAIStatus_code_meaning> summary);
    void killJobSignalFull(OAIHttpRequestWorker *worker, OAIMessage summary);
    void listJobsSignalFull(OAIHttpRequestWorker *worker, QList<OAIJob> summary);
    void popJobLogsSignalFull(OAIHttpRequestWorker *worker, OAILog_piece summary);
    void popStreamEntrySignalFull(OAIHttpRequestWorker *worker, OAIStream_entry summary);

    void createJobSignalE(OAIMessage_and_token summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getJobSignalE(OAIJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getJobTextEntrySignalE(OAIText_entry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getJobTextEntryInfoSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getJobZipSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getJobZipInfoSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getStatusCodesSignalE(QList<OAIStatus_code_meaning> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void killJobSignalE(OAIMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listJobsSignalE(QList<OAIJob> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void popJobLogsSignalE(OAILog_piece summary, QNetworkReply::NetworkError error_type, QString error_str);
    void popStreamEntrySignalE(OAIStream_entry summary, QNetworkReply::NetworkError error_type, QString error_str);

    void createJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getJobTextEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getJobTextEntryInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getJobZipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getJobZipInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStatusCodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void killJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void popJobLogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void popStreamEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal(); 
};

} // namespace OpenAPI
#endif
