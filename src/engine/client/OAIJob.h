/**
 * GAMS Engine
 * GAMS Engine let's you register, solve and get results of GAMS Models. It has namespace management system so you can restrict your users to certain set of models.
 *
 * The version of the OpenAPI document: dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIJob.h
 *
 * 
 */

#ifndef OAIJob_H
#define OAIJob_H

#include <QJsonObject>

#include "OAIResult_user.h"
#include "OAIText_entry.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIJob : public OAIObject {
public:
    OAIJob();
    OAIJob(QString json);
    ~OAIJob() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getToken() const;
    void setToken(const QString &token);

    QString getModel() const;
    void setModel(const QString &model);

    bool isIsTemporaryModel() const;
    void setIsTemporaryModel(const bool &is_temporary_model);

    bool isIsDataProvided() const;
    void setIsDataProvided(const bool &is_data_provided);

    qint32 getStatus() const;
    void setStatus(const qint32 &status);

    qint32 getProcessStatus() const;
    void setProcessStatus(const qint32 &process_status);

    QString getStdoutFilename() const;
    void setStdoutFilename(const QString &stdout_filename);

    QString getNamespace() const;
    void setNamespace(const QString &_namespace);

    QList<OAIText_entry> getTextEntries() const;
    void setTextEntries(const QList<OAIText_entry> &text_entries);

    QList<QString> getStreamEntries() const;
    void setStreamEntries(const QList<QString> &stream_entries);

    QList<QString> getArguments() const;
    void setArguments(const QList<QString> &arguments);

    QDateTime getSubmittedAt() const;
    void setSubmittedAt(const QDateTime &submitted_at);

    QDateTime getFinishedAt() const;
    void setFinishedAt(const QDateTime &finished_at);

    OAIResult_user getUser() const;
    void setUser(const OAIResult_user &user);

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString token;
    bool m_token_isSet;
    bool m_token_isValid;

    QString model;
    bool m_model_isSet;
    bool m_model_isValid;

    bool is_temporary_model;
    bool m_is_temporary_model_isSet;
    bool m_is_temporary_model_isValid;

    bool is_data_provided;
    bool m_is_data_provided_isSet;
    bool m_is_data_provided_isValid;

    qint32 status;
    bool m_status_isSet;
    bool m_status_isValid;

    qint32 process_status;
    bool m_process_status_isSet;
    bool m_process_status_isValid;

    QString stdout_filename;
    bool m_stdout_filename_isSet;
    bool m_stdout_filename_isValid;

    QString _namespace;
    bool m__namespace_isSet;
    bool m__namespace_isValid;

    QList<OAIText_entry> text_entries;
    bool m_text_entries_isSet;
    bool m_text_entries_isValid;

    QList<QString> stream_entries;
    bool m_stream_entries_isSet;
    bool m_stream_entries_isValid;

    QList<QString> arguments;
    bool m_arguments_isSet;
    bool m_arguments_isValid;

    QDateTime submitted_at;
    bool m_submitted_at_isSet;
    bool m_submitted_at_isValid;

    QDateTime finished_at;
    bool m_finished_at_isSet;
    bool m_finished_at_isValid;

    OAIResult_user user;
    bool m_user_isSet;
    bool m_user_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIJob)

#endif // OAIJob_H
