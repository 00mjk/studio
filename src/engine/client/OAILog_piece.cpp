/**
 * GAMS Engine
 * GAMS Engine let's you register, solve and get results of GAMS Models. It has namespace management system so you can restrict your users to certain set of models.
 *
 * The version of the OpenAPI document: dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILog_piece.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILog_piece::OAILog_piece(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILog_piece::OAILog_piece() {
    this->initializeModel();
}

OAILog_piece::~OAILog_piece() {}

void OAILog_piece::initializeModel() {

    m_message_isSet = false;
    m_message_isValid = false;

    m_queue_finished_isSet = false;
    m_queue_finished_isValid = false;

    m_gams_return_code_isSet = false;
    m_gams_return_code_isValid = false;
}

void OAILog_piece::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILog_piece::fromJsonObject(QJsonObject json) {

    m_message_isValid = ::OpenAPI::fromJsonValue(message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_queue_finished_isValid = ::OpenAPI::fromJsonValue(queue_finished, json[QString("queue_finished")]);
    m_queue_finished_isSet = !json[QString("queue_finished")].isNull() && m_queue_finished_isValid;

    m_gams_return_code_isValid = ::OpenAPI::fromJsonValue(gams_return_code, json[QString("gams_return_code")]);
    m_gams_return_code_isSet = !json[QString("gams_return_code")].isNull() && m_gams_return_code_isValid;
}

QString OAILog_piece::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILog_piece::asJsonObject() const {
    QJsonObject obj;
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(message));
    }
    if (m_queue_finished_isSet) {
        obj.insert(QString("queue_finished"), ::OpenAPI::toJsonValue(queue_finished));
    }
    if (m_gams_return_code_isSet) {
        obj.insert(QString("gams_return_code"), ::OpenAPI::toJsonValue(gams_return_code));
    }
    return obj;
}

QString OAILog_piece::getMessage() const {
    return message;
}
void OAILog_piece::setMessage(const QString &message) {
    this->message = message;
    this->m_message_isSet = true;
}

bool OAILog_piece::isQueueFinished() const {
    return queue_finished;
}
void OAILog_piece::setQueueFinished(const bool &queue_finished) {
    this->queue_finished = queue_finished;
    this->m_queue_finished_isSet = true;
}

qint32 OAILog_piece::getGamsReturnCode() const {
    return gams_return_code;
}
void OAILog_piece::setGamsReturnCode(const qint32 &gams_return_code) {
    this->gams_return_code = gams_return_code;
    this->m_gams_return_code_isSet = true;
}

bool OAILog_piece::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue_finished_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gams_return_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILog_piece::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
