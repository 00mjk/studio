/**
 * GAMS Engine
 * GAMS Engine let's you register, solve and get results of GAMS Models. It has namespace management system so you can restrict your users to certain set of models.
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobsApi.h"
#include "OAIHelpers.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIJobsApi::OAIJobsApi(const QString &scheme, const QString &host, int port, const QString &basePath, const int timeOut)
    : _scheme(scheme),
      _host(host),
      _port(port),
      _basePath(basePath),
      _timeOut(timeOut),
      _manager(nullptr),
      isResponseCompressionEnabled(false),
      isRequestCompressionEnabled(false) {}

OAIJobsApi::~OAIJobsApi() {
}

void OAIJobsApi::setScheme(const QString &scheme) {
    _scheme = scheme;
}

void OAIJobsApi::setHost(const QString &host) {
    _host = host;
}

void OAIJobsApi::setPort(int port) {
    _port = port;
}

void OAIJobsApi::setBasePath(const QString &basePath) {
    _basePath = basePath;
}

void OAIJobsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIJobsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIJobsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;  
}

void OAIJobsApi::addHeaders(const QString &key, const QString &value) {
    defaultHeaders.insert(key, value);
}

void OAIJobsApi::enableRequestCompression() {
    isRequestCompressionEnabled = true;
}

void OAIJobsApi::enableResponseCompression() {
    isResponseCompressionEnabled = true;
}

void OAIJobsApi::abortRequests(){
    emit abortRequestsSignal();
}

void OAIJobsApi::createJob(const QString &model, const QString &r_namespace, const QString &stdout_filename, const QList<QString> &text_entries, const QList<QString> &stream_entries, const QList<QString> &arguments, const OAIHttpFileElement &model_data, const OAIHttpFileElement &data, const OAIHttpFileElement &inex_file) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/jobs/");

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("model")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(model)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("namespace")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));

    if (text_entries.size() > 0) {
        if (QString("multi").indexOf("multi") == 0) {
            foreach (QString t, text_entries) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?");
                fullPath.append("text_entries=").append(::OpenAPI::toStringValue(t));
            }
        } else if (QString("multi").indexOf("ssv") == 0) {
            if (fullPath.indexOf("?") > 0)
                fullPath.append("&");
            else
                fullPath.append("?");
            fullPath.append("text_entries=");
            qint32 count = 0;
            foreach (QString t, text_entries) {
                if (count > 0) {
                    fullPath.append(" ");
                }
                fullPath.append(::OpenAPI::toStringValue(t));
            }
        } else if (QString("multi").indexOf("tsv") == 0) {
            if (fullPath.indexOf("?") > 0)
                fullPath.append("&");
            else
                fullPath.append("?");
            fullPath.append("text_entries=");
            qint32 count = 0;
            foreach (QString t, text_entries) {
                if (count > 0) {
                    fullPath.append("\t");
                }
                fullPath.append(::OpenAPI::toStringValue(t));
            }
        }
    }

    if (stream_entries.size() > 0) {
        if (QString("multi").indexOf("multi") == 0) {
            foreach (QString t, stream_entries) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?");
                fullPath.append("stream_entries=").append(::OpenAPI::toStringValue(t));
            }
        } else if (QString("multi").indexOf("ssv") == 0) {
            if (fullPath.indexOf("?") > 0)
                fullPath.append("&");
            else
                fullPath.append("?");
            fullPath.append("stream_entries=");
            qint32 count = 0;
            foreach (QString t, stream_entries) {
                if (count > 0) {
                    fullPath.append(" ");
                }
                fullPath.append(::OpenAPI::toStringValue(t));
            }
        } else if (QString("multi").indexOf("tsv") == 0) {
            if (fullPath.indexOf("?") > 0)
                fullPath.append("&");
            else
                fullPath.append("?");
            fullPath.append("stream_entries=");
            qint32 count = 0;
            foreach (QString t, stream_entries) {
                if (count > 0) {
                    fullPath.append("\t");
                }
                fullPath.append(::OpenAPI::toStringValue(t));
            }
        }
    }

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("stdout_filename")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(stdout_filename)));

    if (arguments.size() > 0) {
        if (QString("multi").indexOf("multi") == 0) {
            foreach (QString t, arguments) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?");
                fullPath.append("arguments=").append(::OpenAPI::toStringValue(t));
            }
        } else if (QString("multi").indexOf("ssv") == 0) {
            if (fullPath.indexOf("?") > 0)
                fullPath.append("&");
            else
                fullPath.append("?");
            fullPath.append("arguments=");
            qint32 count = 0;
            foreach (QString t, arguments) {
                if (count > 0) {
                    fullPath.append(" ");
                }
                fullPath.append(::OpenAPI::toStringValue(t));
            }
        } else if (QString("multi").indexOf("tsv") == 0) {
            if (fullPath.indexOf("?") > 0)
                fullPath.append("&");
            else
                fullPath.append("?");
            fullPath.append("arguments=");
            qint32 count = 0;
            foreach (QString t, arguments) {
                if (count > 0) {
                    fullPath.append("\t");
                }
                fullPath.append(::OpenAPI::toStringValue(t));
            }
        }
    }

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    input.add_file("model_data", model_data.local_filename, model_data.request_filename, model_data.mime_type);
    input.add_file("data", data.local_filename, data.request_filename, data.mime_type);
    input.add_file("inex_file", inex_file.local_filename, inex_file.request_filename, inex_file.mime_type);
    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIJobsApi::createJobCallback);
    connect(this, &OAIJobsApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIJobsApi::createJobCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIMessage_and_token output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit createJobSignal(output);
        emit createJobSignalFull(worker, output);
    } else {
        emit createJobSignalE(output, error_type, error_str);
        emit createJobSignalEFull(worker, error_type, error_str);
    }
}

void OAIJobsApi::getJob(const QString &token, const QString &x_fields) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/jobs/{token}");
    QString tokenPathParam("{");
    tokenPathParam.append("token").append("}");
    fullPath.replace(tokenPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(token)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    if (!::OpenAPI::toStringValue(x_fields).isEmpty()) {
        input.headers.insert("X-Fields", ::OpenAPI::toStringValue(x_fields));
    }

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIJobsApi::getJobCallback);
    connect(this, &OAIJobsApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIJobsApi::getJobCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIJob output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getJobSignal(output);
        emit getJobSignalFull(worker, output);
    } else {
        emit getJobSignalE(output, error_type, error_str);
        emit getJobSignalEFull(worker, error_type, error_str);
    }
}

void OAIJobsApi::getJobTextEntry(const QString &token, const QString &entry_name, const qint32 &start_position, const qint32 &length) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/jobs/{token}/text-entry/{entry_name}");
    QString tokenPathParam("{");
    tokenPathParam.append("token").append("}");
    fullPath.replace(tokenPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(token)));
    QString entry_namePathParam("{");
    entry_namePathParam.append("entry_name").append("}");
    fullPath.replace(entry_namePathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(entry_name)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("start_position")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(start_position)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("length")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(length)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIJobsApi::getJobTextEntryCallback);
    connect(this, &OAIJobsApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIJobsApi::getJobTextEntryCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIText_entry output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getJobTextEntrySignal(output);
        emit getJobTextEntrySignalFull(worker, output);
    } else {
        emit getJobTextEntrySignalE(output, error_type, error_str);
        emit getJobTextEntrySignalEFull(worker, error_type, error_str);
    }
}

void OAIJobsApi::getJobTextEntryInfo(const QString &token, const QString &entry_name) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/jobs/{token}/text-entry/{entry_name}");
    QString tokenPathParam("{");
    tokenPathParam.append("token").append("}");
    fullPath.replace(tokenPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(token)));
    QString entry_namePathParam("{");
    entry_namePathParam.append("entry_name").append("}");
    fullPath.replace(entry_namePathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(entry_name)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "HEAD");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIJobsApi::getJobTextEntryInfoCallback);
    connect(this, &OAIJobsApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIJobsApi::getJobTextEntryInfoCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getJobTextEntryInfoSignal();
        emit getJobTextEntryInfoSignalFull(worker);
    } else {
        emit getJobTextEntryInfoSignalE(error_type, error_str);
        emit getJobTextEntryInfoSignalEFull(worker, error_type, error_str);
    }
}

void OAIJobsApi::getJobZip(const QString &token) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/jobs/{token}/result");
    QString tokenPathParam("{");
    tokenPathParam.append("token").append("}");
    fullPath.replace(tokenPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(token)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIJobsApi::getJobZipCallback);
    connect(this, &OAIJobsApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIJobsApi::getJobZipCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getJobZipSignal(output);
        emit getJobZipSignalFull(worker, output);
    } else {
        emit getJobZipSignalE(output, error_type, error_str);
        emit getJobZipSignalEFull(worker, error_type, error_str);
    }
}

void OAIJobsApi::getJobZipInfo(const QString &token) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/jobs/{token}/result");
    QString tokenPathParam("{");
    tokenPathParam.append("token").append("}");
    fullPath.replace(tokenPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(token)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "HEAD");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIJobsApi::getJobZipInfoCallback);
    connect(this, &OAIJobsApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIJobsApi::getJobZipInfoCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getJobZipInfoSignal();
        emit getJobZipInfoSignalFull(worker);
    } else {
        emit getJobZipInfoSignalE(error_type, error_str);
        emit getJobZipInfoSignalEFull(worker, error_type, error_str);
    }
}

void OAIJobsApi::getStatusCodes(const QString &x_fields) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/jobs/status-codes");

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    if (!::OpenAPI::toStringValue(x_fields).isEmpty()) {
        input.headers.insert("X-Fields", ::OpenAPI::toStringValue(x_fields));
    }

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIJobsApi::getStatusCodesCallback);
    connect(this, &OAIJobsApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIJobsApi::getStatusCodesCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    QList<OAIStatus_code_meaning> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    foreach (QJsonValue obj, jsonArray) {
        OAIStatus_code_meaning val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getStatusCodesSignal(output);
        emit getStatusCodesSignalFull(worker, output);
    } else {
        emit getStatusCodesSignalE(output, error_type, error_str);
        emit getStatusCodesSignalEFull(worker, error_type, error_str);
    }
}

void OAIJobsApi::killJob(const QString &token, const bool &hard_kill) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/jobs/{token}");
    QString tokenPathParam("{");
    tokenPathParam.append("token").append("}");
    fullPath.replace(tokenPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(token)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("hard_kill")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(hard_kill)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIJobsApi::killJobCallback);
    connect(this, &OAIJobsApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIJobsApi::killJobCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIMessage output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit killJobSignal(output);
        emit killJobSignalFull(worker, output);
    } else {
        emit killJobSignalE(output, error_type, error_str);
        emit killJobSignalEFull(worker, error_type, error_str);
    }
}

void OAIJobsApi::listJobs(const bool &everyone, const QString &x_fields) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/jobs/");

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("everyone")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(everyone)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    if (!::OpenAPI::toStringValue(x_fields).isEmpty()) {
        input.headers.insert("X-Fields", ::OpenAPI::toStringValue(x_fields));
    }

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIJobsApi::listJobsCallback);
    connect(this, &OAIJobsApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIJobsApi::listJobsCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    QList<OAIJob> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    foreach (QJsonValue obj, jsonArray) {
        OAIJob val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit listJobsSignal(output);
        emit listJobsSignalFull(worker, output);
    } else {
        emit listJobsSignalE(output, error_type, error_str);
        emit listJobsSignalEFull(worker, error_type, error_str);
    }
}

void OAIJobsApi::popJobLogs(const QString &token) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/jobs/{token}/unread-logs");
    QString tokenPathParam("{");
    tokenPathParam.append("token").append("}");
    fullPath.replace(tokenPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(token)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIJobsApi::popJobLogsCallback);
    connect(this, &OAIJobsApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIJobsApi::popJobLogsCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAILog_piece output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit popJobLogsSignal(output);
        emit popJobLogsSignalFull(worker, output);
    } else {
        emit popJobLogsSignalE(output, error_type, error_str);
        emit popJobLogsSignalEFull(worker, error_type, error_str);
    }
}

void OAIJobsApi::popStreamEntry(const QString &token, const QString &entry_name) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/jobs/{token}/stream-entry/{entry_name}");
    QString tokenPathParam("{");
    tokenPathParam.append("token").append("}");
    fullPath.replace(tokenPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(token)));
    QString entry_namePathParam("{");
    entry_namePathParam.append("entry_name").append("}");
    fullPath.replace(entry_namePathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(entry_name)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIJobsApi::popStreamEntryCallback);
    connect(this, &OAIJobsApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIJobsApi::popStreamEntryCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIStream_entry output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit popStreamEntrySignal(output);
        emit popStreamEntrySignalFull(worker, output);
    } else {
        emit popStreamEntrySignalE(output, error_type, error_str);
        emit popStreamEntrySignalEFull(worker, error_type, error_str);
    }
}

} // namespace OpenAPI
